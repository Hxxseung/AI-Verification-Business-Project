# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # JDK 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.properties 생성
      - name: make application.properties
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'dev')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build & push to dev
        if: contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/onigiri-server .
          docker push ${{ secrets.DOCKER_USERNAME }}/onigiri-server

      ## deploy to dev
      - name: Deploy to dev
        uses: appleboy/ssh-action@v1.1.0
        id: deploy-prod
        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8081")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/onigiri-server
            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/onigiri-server
            sudo docker image prune -f